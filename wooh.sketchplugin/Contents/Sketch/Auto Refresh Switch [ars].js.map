{"version":3,"sources":["webpack://exports/webpack/bootstrap","webpack://exports/./node_modules/sketch-module-google-analytics/index.js","webpack://exports/./src/Auto Refresh Switch [ars].js","webpack://exports/./src/Preview In Browser [pib].js","webpack://exports/./src/modules/Google Analytics Method.js","webpack://exports/external \"sketch\"","webpack://exports/external \"sketch/settings\"","webpack://exports/external \"sketch/ui\""],"names":["doc","sketch","getSelectedDocument","selection","selectedLayers","layers","UI","require","Settings","artboard","autoRefreshKey","getInputFromUser","type","INPUT_TYPE","possibleValues","err","value","setSessionVariable","length","i","getParentArtboard","selectedPage","find","item","message","artboardBrowse","name","GA","sessionVariable","autoRefreshHandler","refreshImg","autoRefreshHandlerSave","pageTitle","customBlockKey","artboardname","replace","filename","NSTemporaryDirectory","sketchObject","saveArtboardOrSlice_toFile","scaleArtboard","htmlContent","NSString","stringWithString_","frame","width","colorToRGBA","backgroundColor","filepath","dataUsingEncoding_","NSUTF8StringEncoding","writeToFile_atomically_","file","NSURL","fileURLWithPath","NSWorkspace","sharedWorkspace","openFile","path","layer","times","rect","absoluteInfluenceRect","request","MSExportRequest","new","scale","color","rgbaValue","red","toFixed","green","blue","alpha","CommandResult","track","variant","MSApplicationMetadata","metadata","Appinfo","context","plugin","url","split","findIndex","version","identifier","CommandInfo","command","ec","ea","el"],"mappings":"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","file":"Auto Refresh Switch [ars].js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/Auto Refresh Switch [ars].js\");\n","var Settings = require(\"sketch/settings\");\n\nvar kUUIDKey = \"google.analytics.uuid\";\nvar uuid = null\nvar uuid = NSUserDefaults.standardUserDefaults().objectForKey(kUUIDKey) + '-' + context.plugin.url().path().split('/')[context.plugin.url().path().split('/').findIndex(item => item === 'Users') + 1];\nif (!uuid) {\n    uuid = NSUUID.UUID().UUIDString();\n    NSUserDefaults.standardUserDefaults().setObject_forKey(uuid, kUUIDKey)\n}\n\nvar variant = MSApplicationMetadata.metadata().variant;\nvar source =\n    \"Sketch \" +\n    (variant == \"NONAPPSTORE\" ? \"\" : variant + \" \") +\n    Settings.version.sketch;\n\nfunction jsonToQueryString(json) {\n    return Object.keys(json)\n        .map(function(key) {\n            return encodeURIComponent(key) + \"=\" + encodeURIComponent(json[key]);\n        })\n        .join(\"&\");\n}\n\nfunction makeRequest(url, options) {\n    if (!url) {\n        return\n    }\n\n    if (options && options.makeRequest) {\n        return options.makeRequest(url)\n    }\n    if (options && options.debug) {\n        var request = NSURLRequest.requestWithURL(url)\n        var responsePtr = MOPointer.alloc().init();\n        var errorPtr = MOPointer.alloc().init();\n\n        var data = NSURLConnection.sendSynchronousRequest_returningResponse_error(request, responsePtr, errorPtr)\n        return data ? NSString.alloc().initWithData_encoding(data, NSUTF8StringEncoding) : errorPtr.value()\n    }\n\n    NSURLSession.sharedSession()\n        .dataTaskWithURL(url)\n        .resume();\n}\n\nmodule.exports = function(trackingId, hitType, props, options) {\n    var payload = {\n        v: 1,\n        tid: trackingId,\n        ds: source,\n        cid: uuid,\n        t: hitType\n    };\n\n    if (typeof __command !== \"undefined\") {\n        payload.an = __command.pluginBundle().name();\n        payload.aid = __command.pluginBundle().identifier();\n        payload.av = __command.pluginBundle().version();\n    }\n\n    if (props) {\n        Object.keys(props).forEach(function(key) {\n            payload[key] = props[key];\n        });\n    }\n\n    var url = NSURL.URLWithString(\n        \"https://www.google-analytics.com/\" + (options && options.debug ? \"debug/\" : \"\") + \"collect?\" +\n        jsonToQueryString(payload) +\n        \"&z=\" +\n        NSUUID.UUID().UUIDString()\n    );\n\n    return makeRequest(url, options)\n};","import sketch from 'sketch'\nimport GA from \"./modules/Google Analytics Method\"\nlet doc = sketch.getSelectedDocument(),\n    selection = doc.selectedLayers.layers,\n    UI = require('sketch/ui'),\n    Settings = require('sketch/settings'),\n    artboard = 0\nimport { artboardBrowse } from \"./Preview In Browser [pib]\"\n\nexport default function() {\n    let autoRefreshKey\n\n    UI.getInputFromUser(\n        \"Choose Auto Refresh Mode\", {\n            type: UI.INPUT_TYPE.selection,\n            possibleValues: [\"No auto refresh\", \"Refresh when saving document\", \"Auto refresh\"],\n        },\n        (err, value) => {\n            if (err) {\n                return\n            } else {\n                Settings.setSessionVariable('autoRefreshKey', value)\n                autoRefreshKey = value\n            }\n        }\n    )\n\n    //setDefaultSelectedArtboard\n    if (selection.length > 0) {\n        for (let i = 0; artboard == 0 && i < selection.length; i++) {\n            artboard = selection[i].getParentArtboard() || selection[i]\n            if (artboard.type !== \"Artboard\") {\n                artboard = 0\n            }\n        }\n    }\n\n    if (artboard == 0 && doc.selectedPage.layers.find(item => item.type === \"Artboard\")) {\n        artboard = doc.selectedPage.layers.find(item => item.type === \"Artboard\")\n    }\n\n    //toastMessage\n    if (autoRefreshKey === \"Auto refresh\") {\n        sketch.UI.message('Auto Refresh In Browser: On')\n        artboardBrowse(artboard, \"AutoRefreshing\", false)\n    } else if (autoRefreshKey === \"Refresh when saving document\") {\n        sketch.UI.message('It Will Refresh When You Save Document Pressing Command + S')\n        artboardBrowse(artboard, \"AutoRefreshing\", false)\n    } else {\n        sketch.UI.message('Auto Refresh In Browser: Off')\n        artboardBrowse(artboard, artboard.name, true)\n    }\n\n    //GA\n    GA(autoRefreshKey)\n}","import sketch from 'sketch'\nimport GA from \"./modules/Google Analytics Method\"\n//thank gaddafirusli\n\nlet doc = sketch.getSelectedDocument(),\n    Settings = require('sketch/settings'),\n    autoRefreshKey = Settings.sessionVariable('autoRefreshKey'),\n    selection = doc.selectedLayers.layers,\n    artboard = 0\n\nif (selection.length > 0) {\n    for (let i = 0; artboard == 0 && i < selection.length; i++) {\n        artboard = selection[i].getParentArtboard() || selection[i]\n        if (artboard.type !== \"Artboard\") {\n            artboard = 0\n        }\n    }\n}\n\nexport default function() {\n    if (autoRefreshKey === \"Auto refresh\" || autoRefreshKey === \"Refresh when saving document\") {\n        artboardBrowse(artboard, \"AutoRefreshing\", false)\n    } else {\n        artboardBrowse(artboard, artboard.name, true)\n    }\n\n    //GA\n    GA(\":-)\")\n}\n\nexport function autoRefreshHandler() {\n    if (autoRefreshKey === \"Auto refresh\") {\n        refreshImg()\n    }\n}\n\nexport function autoRefreshHandlerSave() {\n    if (autoRefreshKey === \"Refresh when saving document\") {\n        refreshImg()\n    }\n}\n\n//functions\nexport function artboardBrowse(artboard, pageTitle, customBlockKey) {\n    if (artboard === 0) {\n        sketch.UI.message(\"Please Select 1 Artboard\")\n    } else {\n        let artboardname = pageTitle\n        artboardname = artboardname.replace(/['|'|/|#|.|\\\\|\"|\"]/g, '')\n        let filename = NSTemporaryDirectory() + artboardname + \".png\"\n        doc.sketchObject.saveArtboardOrSlice_toFile(scaleArtboard(artboard, 2), filename)\n\n        //htmlContent\n        let htmlContent = NSString.stringWithString_(\n            \"<html>\\\n            <head><meta charset='UTF-8'></head>\" +\n            \"<body id='\" + customBlockKey + \"'>\\\n            <img id='mainImg' width=\" + (artboard.sketchObject.frame()).width() + \" src='./\" + artboardname + \".png' center top no-repeat;'>\\\n            <div id='refreshBlock' onClick='refreshBlock()'>Stop Refreshing</div>\\\n            </body>\\\n            <style type='text/css'>\\\n            body {\\\n                text-align: center;\\\n                margin: 0;\\\n                padding: 0;\\\n                background:\" + colorToRGBA(artboard.sketchObject.backgroundColor()) + \";}\\\n            body::-webkit-scrollbar {\\\n                display: none;}\\\n            #refreshBlock {\\\n                opacity: .3;\\\n                position: fixed;\\\n                right: 20px;\\\n                bottom: 10px;\\\n                background: rgba(0, 0, 0, .8);\\\n                border-radius: 100px;\\\n                font-family: sans - serif;\\\n                font-size: 12px;\\\n                padding: 1px 8px;\\\n                color: white;\\\n                cursor: pointer;\\\n                user-select: none;}\\\n            #refreshBlock:hover {opacity: .9;\\\n                transition: .25s;}\\\n            </style>\\\n            <script>\\\n            let stopRefreshKey = JSON.parse(document.getElementsByTagName('body')[0].id);\\\n            if (stopRefreshKey == true) {document.getElementById('refreshBlock').remove();};\\\n            let runKey = 0;\\\n            function workLoop(deadline) {\\\n                while (runKey == 0 && stopRefreshKey == false && deadline.timeRemaining() > 1) {\\\n                    runKey = 1;\\\n                    document.getElementById('mainImg').src=document.getElementById('mainImg').src+'?t='+Math.random();\\\n                    setTimeout (function() {runKey = 0;},500);};\\\n                    window.requestIdleCallback(workLoop);\\\n                };\\\n            window.requestIdleCallback(workLoop);\\\n            let refreshBlock = function() {\\\n                if (stopRefreshKey == false) { stopRefreshKey = true; document.getElementById('refreshBlock').innerHTML='Continue To Refresh';}\\\n                else { location.reload()\\\n                    /*stopRefreshKey = false; window.requestIdleCallback(workLoop); document.getElementById('refreshBlock').innerHTML='Stop Refreshing';*/};\\\n            };\\\n            </script>\\\n            </html>\"\n        )\n\n        let filepath = NSTemporaryDirectory() + artboardname + \".html\";\n        htmlContent.dataUsingEncoding_(NSUTF8StringEncoding).writeToFile_atomically_(filepath, true);\n        let file = NSURL.fileURLWithPath(filepath)\n        NSWorkspace.sharedWorkspace().openFile(file.path())\n    }\n}\n\nfunction refreshImg() {\n    if (artboard !== 0) {\n        let artboardname = \"AutoRefreshing\"\n        artboardname = artboardname.replace(/['|'|/|#|.|\\\\|\"|\"]/g, '')\n        let filename = NSTemporaryDirectory() + artboardname + \".png\"\n        doc.sketchObject.saveArtboardOrSlice_toFile(scaleArtboard(artboard, 2), filename)\n        sketch.UI.message(\"Browser Preview Refreshing\")\n    }\n}\n\nfunction scaleArtboard(layer, times) {\n    let rect = layer.sketchObject.absoluteInfluenceRect()\n    let request = MSExportRequest.new()\n    request.rect = rect\n    request.scale = times\n    return request\n}\n\nfunction colorToRGBA(color) {\n    let rgbaValue = \"rgba(\" + (color.red() * 255).toFixed(0) + \",\" + (color.green() * 255).toFixed(0) + \",\" + (color.blue() * 255).toFixed(0) + \",\" + color.alpha().toFixed(2) + \")\";\n    return rgbaValue;\n}","let Settings = require('sketch/settings')\n\nexport default function(CommandResult) {\n    let track = require(\"sketch-module-google-analytics\")\n    let variant = MSApplicationMetadata.metadata().variant\n    let Appinfo = context.plugin.url().path().split('/')[context.plugin.url().path().split('/').findIndex(item => item === 'Users') + 1] + \"-Skth\" + (variant == \"NONAPPSTORE\" ? \"\" : variant + \" \") + Settings.version.sketch + \"-\" + context.plugin.identifier() + \" [\" + context.plugin.version() + \"]\"\n    let CommandInfo = context.command.identifier()\n\n    track(\"UA-169300937-3\", \"event\", {\n        ec: Appinfo, // the event category\n        ea: CommandInfo, // the event action\n        el: CommandResult // the event label\n    })\n}","module.exports = require(\"sketch\");","module.exports = require(\"sketch/settings\");","module.exports = require(\"sketch/ui\");"],"sourceRoot":""}